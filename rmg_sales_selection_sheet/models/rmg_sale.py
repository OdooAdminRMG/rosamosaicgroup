# -*- coding: utf-8 -*-
import logging
from ast import literal_eval

from odoo import _, api, fields, models

_logger = logging.getLogger(__name__)


class RmgSale(models.Model):
    _name = "rmg.sale"
    _description = "rmg sale"
    _rec_name = 'order_line_id'

    order_id = fields.Many2one("sale.order")
    order_line_id = fields.Many2one("sale.order.line")
    mrp_order_id = fields.Many2one("mrp.production", string="MRP Order Id")
    # order_line_ids = fields.One2many("sale.order.line", 'rmg_sale_id', string=_("Order Lines"))
    order_line_ids = fields.Many2many(
        "sale.order.line",
        compute="compute_order_lines",
        string="Order Lines")

    # order_line_ids = fields.One2many(
    #     "sale.order.line",
    #     "rmg_sale_id",
    #     string=_("Order Lines"),
    #     compute="compute_order_lines",
    #     store=True,
    # )

    # Do not allow creation of new values.
    corner_treatments_id = fields.Many2one(
        "corner.treatments", string=_("Corner Treatments")
    )
    customer_sink_types_id = fields.Many2one(
        "customer.sink.types", string=_("Customer Sink Types")
    )
    # Do not allow creation of new values.
    edge_profiles_id = fields.Many2one("edge.profiles", string=_("Edge Profiles"))
    faucets_id = fields.Many2one("faucets", string=_("Faucets"))
    # Do not allow creation of new values.
    range_types_id = fields.Many2one("range.types", string=_("Range Types"))

    # baki
    # The standard Search More function should be made available so that users can search for a Lot / Serial Number via
    # filters like product, product category, etc.
    # Pass this value to the transfer from the warehouse to pre - production.
    slab_tagged_id = fields.Many2one("stock.production.lot", string=_("Slab Tagged"))
    slab_notes = fields.Text(string=_("Slab Notes"))

    def _get_sink_by_bella_domain(self):
        res = self.env["ir.config_parameter"].get_param(
            "rmg_sales_selection_sheet.sink_by_bella_product_categories"
        )
        res = literal_eval(res) if res else []
        childs = self.rec_child(res)

        return [("categ_id", "in", childs)]

    # Do not allow creation of new values.Only allow products whose Product Category is tiered into(i.e.child of) one
    # or more of threading product categories maintained in Sales > Configuration > Sink By Bella Product Categories
    sink_by_bella_id = fields.Many2one(
        "product.product", string=_("Sink by Bella"), domain=_get_sink_by_bella_domain
    )

    # Do not allow creation of new values.

    # Only make this field visible if the Customer Sink value is populated.
    customer_sink_model_number = fields.Text(string=_("Customer Sink Model Number"))
    # Only make this field visible if the Faucet value is populated.
    faucet_model = fields.Text(string=_("Faucet Model"))
    additional_holes = fields.Text(string=_("Additional Holes"))
    # Only make this field visible if the Range Type value is populated.
    range_model = fields.Text(string=_("Range Model"))
    # Only make this field visible if the Corner Treatment value is populated.
    corner_treatment_notes = fields.Text(string=_("Corner Treatment Notes"))
    shop_notes = fields.Text(string=_("Shop Notes"))
    installation_notes = fields.Text(string=_("Installation Notes"))
    splash = fields.Text(string=_("Splash"))

    # baki
    # Used to store the expected square footage used of the slab which will be consumed by the Manufacturing Order
    # Update Component quantity on MO, also transfer this value to the Selection
    # Sheet tab on the MO.Also, propagate this value to any PO generated by the MO
    square_footage_estimate = fields.Float(string=_("Square Footage Estimate"))
    # Only show records whose department_id value is one of those maintained in Sales > Configuration > Selection Sheet > Template Departments
    def _get_template_by_id_domain(self):
        res = self.env["ir.config_parameter"].get_param(
            "rmg_sales_selection_sheet.template_departments"
        )
        res = literal_eval(res) if res else []

        return [("department_id", "in", res)]
    templated_by_id = fields.Many2one("hr.employee", string=_("Templated by"), domain=_get_template_by_id_domain)
    # baki
    # Not editable.Selection values: (“New”, “Pre-Release”, “Released”).This field shall be used to retain the status
    # of  the selection sheet.Certain fields may not be editable based on the values maintained here.
    status = fields.Selection(
        [("new", "New"), ("pre_release", "Pre-Release"), ("released", "Released")],
        string=_("Status"),
        default="new",
    )

    def confirm_data(self):
        print("Confirmed")

    @api.model
    def create(self, vals):
        if vals:
            vals['status']='pre_release'
        return super().create(vals)



    def rec_child(self, ele):
        temp = ele
        ele = self.env["product.category"].browse(ele)
        for child in ele:
            if child.child_id:
                for i in child.child_id.ids:
                    if i not in temp:
                        temp.append(i)
        if len(temp) != len(ele):
            return self.rec_child(temp)
        else:
            return ele.ids

    # @api.model
    # def default_get(self, fields_list):
    #     res = super(RmgSale, self).default_get(fields_list)
    #     lines = self.env["sale.order.line"].search(
    #         [("section_id.id", "=", res.get('order_line_id'))]
    #     )
    #     res.update({'order_line_ids': lines}) if lines else False
    #     return res

    @api.depends("order_line_id")
    def compute_order_lines(self):
        self.order_line_ids = self.order_id.order_line.filtered(
            lambda x: x.section_id.id == self.order_line_id.id).mapped('id')
